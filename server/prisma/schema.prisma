generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(100)
  slug         String     @unique @db.VarChar(100)
  description  String?
  parentId     Int?
  imageUrl     String?    @map("image_url") @db.VarChar(255)
  isActive     Boolean    @default(true) @map("is_active")
  displayOrder Int        @default(0) @map("display_order")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  products    ProductCategory[] //관계 추가
  // 자기 참조 관계
  parent       Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryToCategory")
  
  // 테이블 이름 지정
  @@map("categories")
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  slug         String   @unique @db.VarChar(255)
  description  String?
  price        Decimal  @db.Decimal(12, 2)
  salePrice    Decimal? @map("sale_price") @db.Decimal(12, 2)
  stock        Int      @default(0)
  sku          String?  @unique @db.VarChar(100)
  isActive     Boolean  @default(true) @map("is_active")
  isFeatured   Boolean  @default(false) @map("is_featured")
  metaTitle    String?  @map("meta_title") @db.VarChar(255)
  metaDescription String? @map("meta_description")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // 관계
  categories   ProductCategory[]
  images       ProductImage[]
  
  @@map("products")
}

model ProductCategory {
  productId   Int      @map("product_id")
  categoryId  Int      @map("category_id")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")
  imageUrl    String   @map("image_url") @db.VarChar(255)
  altText     String?  @map("alt_text") @db.VarChar(255)
  isPrimary   Boolean  @default(false) @map("is_primary")
  displayOrder Int      @default(0) @map("display_order")
  createdAt   DateTime @default(now()) @map("created_at")
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}