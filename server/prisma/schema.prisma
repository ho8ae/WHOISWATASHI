generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(100)
  slug         String     @unique @db.VarChar(100)
  description  String?
  parentId     Int?
  imageUrl     String?    @map("image_url") @db.VarChar(255)
  isActive     Boolean    @default(true) @map("is_active")
  displayOrder Int        @default(0) @map("display_order")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  products    ProductCategory[] //관계 추가
  // 자기 참조 관계
  parent       Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryToCategory")
  
  // 테이블 이름 지정
  @@map("categories")
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  slug         String   @unique @db.VarChar(255)
  description  String?
  price        Decimal  @db.Decimal(12, 2)
  salePrice    Decimal? @map("sale_price") @db.Decimal(12, 2)
  stock        Int      @default(0)
  sku          String?  @unique @db.VarChar(100)
  isActive     Boolean  @default(true) @map("is_active")
  isFeatured   Boolean  @default(false) @map("is_featured")
  metaTitle    String?  @map("meta_title") @db.VarChar(255)
  metaDescription String? @map("meta_description")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // 관계
  categories   ProductCategory[]
  images       ProductImage[]
  variants     ProductVariant[]
  reviews      Review[]
  wishlists    Wishlist[]
  
  @@map("products")
}

// 옵션 타입 (예: 색상, 사이즈)
model OptionType {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(100)
  displayOrder Int           @default(0) @map("display_order")
  
  values       OptionValue[]
  
  @@map("option_types")
}

// 옵션 값 (예: 빨강, 파랑, S, M, L)
model OptionValue {
  id            Int                   @id @default(autoincrement())
  optionTypeId  Int                   @map("option_type_id")
  value         String                @db.VarChar(100)
  displayOrder  Int                   @default(0) @map("display_order")
  
  optionType    OptionType            @relation(fields: [optionTypeId], references: [id], onDelete: Cascade)
  variants      VariantOptionValue[]
  
  @@map("option_values")
}

// 상품 변형 (특정 옵션 조합)
model ProductVariant {
  id         Int                   @id @default(autoincrement())
  productId  Int                   @map("product_id")
  sku        String?               @unique @db.VarChar(100)
  price      Decimal?              @db.Decimal(12, 2)
  salePrice  Decimal?              @map("sale_price") @db.Decimal(12, 2)
  stock      Int                   @default(0)
  isActive   Boolean               @default(true) @map("is_active")
  imageUrl   String?               @map("image_url") @db.VarChar(255)
  createdAt  DateTime              @default(now()) @map("created_at")
  updatedAt  DateTime              @updatedAt @map("updated_at")
  
  product    Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  options    VariantOptionValue[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  
  @@map("product_variants")
}

// 변형-옵션값 관계 (어떤 변형이 어떤 옵션값을 가지는지)
model VariantOptionValue {
  variantId     Int          @map("variant_id")
  optionValueId Int          @map("option_value_id")
  
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValue   OptionValue    @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  
  @@id([variantId, optionValueId])
  @@map("variant_option_values")
}


model ProductCategory {
  productId   Int      @map("product_id")
  categoryId  Int      @map("category_id")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")
  imageUrl    String   @map("image_url") @db.VarChar(255)
  altText     String?  @map("alt_text") @db.VarChar(255)
  isPrimary   Boolean  @default(false) @map("is_primary")
  displayOrder Int      @default(0) @map("display_order")
  createdAt   DateTime @default(now()) @map("created_at")
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_resets")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  name            String
  phone           String?
  birthYear       Int?
  birthMonth      Int?
  birthDay        Int?
  isSolarCalendar Boolean?  @default(true) @map("is_solar_calendar")
  role            String    @default("customer") // customer, admin
  agreeTerms      Boolean   @default(false) @map("agree_terms")
  agreePrivacy    Boolean   @default(false) @map("agree_privacy")
  agreeSMS        Boolean   @default(false) @map("agree_sms")
  refreshToken    String?   @map("refresh_token")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // 소셜 로그인 정보 (추후 구현)
  // kakaoId        String?   @unique @map("kakao_id")
  // googleId       String?   @unique @map("google_id")
  
  // 관계
  passwordResets PasswordReset[]
  addresses       Address[]
  orders          Order[]
  cart            Cart[]
  reviews         Review[]
  wishlists       Wishlist[]
  inquiries       Inquiry[]
  inquiryAnswers  InquiryAnswer[]
  userChats       Chat[]          @relation("UserChats")
  adminChats      Chat[]          @relation("AdminChats")
  chatMessages    ChatMessage[]
  notifications   Notification[]
  
  @@map("users")
}

model VerificationCode {
  id         Int       @id @default(autoincrement())
  phone      String
  code       String
  isVerified Boolean   @default(false) @map("is_verified")
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  
  @@map("verification_codes")
}

model Address {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  name        String    // 주소 별칭(예: 집, 회사)
  recipient   String    // 수령인
  postalCode  String    @map("postal_code")
  address1    String    // 기본 주소
  address2    String?   // 상세 주소
  phone       String?
  isDefault   Boolean   @default(false) @map("is_default")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int?      @map("user_id")
  sessionId String?   @map("session_id") @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  items     CartItem[]
  
  @@map("carts")
}

model CartItem {
  id               Int             @id @default(autoincrement())
  cartId           Int             @map("cart_id")
  productVariantId Int             @map("product_variant_id")
  quantity         Int
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  
  cart             Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant  @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  
  @@map("cart_items")
}

model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique @map("order_number")
  userId          Int?          @map("user_id")
  email           String        @db.VarChar(255)
  phone           String        @db.VarChar(20)
  status          String        @default("pending") // pending, processing, completed, cancelled, refunded
  totalAmount     Decimal       @map("total_amount") @db.Decimal(12, 2)
  shippingFee     Decimal       @default(0) @map("shipping_fee") @db.Decimal(12, 2)
  discountAmount  Decimal       @default(0) @map("discount_amount") @db.Decimal(12, 2)
  paymentMethod   String?       @map("payment_method") @db.VarChar(50)
  paymentStatus   String        @default("pending") @map("payment_status") // pending, paid, failed
  guestPassword   String?       @map("guest_password") // 비회원 주문 비밀번호 (해시)
  recipientName   String        @map("recipient_name") @db.VarChar(100)
  recipientPhone  String        @map("recipient_phone") @db.VarChar(20)
  postalCode      String        @map("postal_code") @db.VarChar(20)
  address1        String        @db.VarChar(255)
  address2        String?       @db.VarChar(255)
  shippedAt       DateTime?     @map("shipped_at")
  deliveredAt     DateTime?     @map("delivered_at")
  trackingNumber  String?       @map("tracking_number") @db.VarChar(100)
  notes           String?       @db.Text
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  payments        Payment[]
  reviews         Review[]
  histories       OrderHistory[]
  
  
  @@index([orderNumber])
  @@index([email])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

// 주문 아이템 모델
model OrderItem {
  id                Int            @id @default(autoincrement())
  orderId           Int            @map("order_id")
  productVariantId  Int?           @map("product_variant_id")
  productId         Int            @map("product_id")
  productName       String         @map("product_name") @db.VarChar(255)
  variantInfo       Json?          @map("variant_info") // 주문 시점의 변형 정보 저장
  quantity          Int
  unitPrice         Decimal        @map("unit_price") @db.Decimal(12, 2)
  totalPrice        Decimal        @map("total_price") @db.Decimal(12, 2)
  createdAt         DateTime       @default(now()) @map("created_at")
  
  order             Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariant    ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: SetNull)
  
  @@index([orderId])
  @@index([productVariantId])
  @@map("order_items")
}

// 결제 모델
model Payment {
  id                  Int       @id @default(autoincrement())
  orderId             Int       @map("order_id")
  amount              Decimal   @db.Decimal(12, 2)
  provider            String    @db.VarChar(50) // portone, toss
  status              String    // pending, completed, failed, refunded
  paymentKey          String?   @map("payment_key") @db.VarChar(255)
  paymentData         Json?     @map("payment_data") // 결제 관련 추가 데이터
  errorMessage        String?   @map("error_message") @db.Text
  refundedAmount      Decimal?  @map("refunded_amount") @db.Decimal(12, 2)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  
  order               Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([paymentKey])
  @@map("payments")
}

model Review {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  productId   Int       @map("product_id")
  orderId     Int?      @map("order_id")
  rating      Int
  title       String    @db.VarChar(100)
  content     String
  images      String[]
  isVerified  Boolean   @default(false) @map("is_verified")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  order       Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([productId])
  @@index([orderId])
  @@map("reviews")
}

model Wishlist {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  productId   Int       @map("product_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("wishlists")
}

// 주문 히스토리 모델
model OrderHistory {
  id          Int       @id @default(autoincrement())
  orderId     Int       @map("order_id")
  status      String    // 'pending', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded'
  message     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@map("order_histories")
}

// schema.prisma에 추가
model Inquiry {
  id              Int       @id @default(autoincrement())
  userId          Int?      @map("user_id")
  email           String    @db.VarChar(255) // 비회원 문의 대응
  name            String    @db.VarChar(100)
  title           String    @db.VarChar(255)
  content         String    @db.Text
  isPrivate       Boolean   @default(false) @map("is_private")
  password        String?   @db.VarChar(100) // 비회원 문의 비밀번호(해시)
  status          String    @default("pending") // pending, answered, closed
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  answers         InquiryAnswer[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("inquiries")
}

model InquiryAnswer {
  id              Int       @id @default(autoincrement())
  inquiryId       Int       @map("inquiry_id")
  adminId         Int       @map("admin_id")
  content         String    @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  inquiry         Inquiry   @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  admin           User      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@index([inquiryId])
  @@map("inquiry_answers")
}

// 채팅방
model Chat {
  id              Int           @id @default(autoincrement())
  userId          Int           @map("user_id")
  adminId         Int?          @map("admin_id")
  subject         String        @db.VarChar(255)
  status          String        @default("pending") // pending, in_progress, closed
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  user            User          @relation("UserChats", fields: [userId], references: [id], onDelete: Cascade)
  admin           User?         @relation("AdminChats", fields: [adminId], references: [id], onDelete: SetNull)
  messages        ChatMessage[]
  
  @@index([userId])
  @@index([adminId])
  @@index([status])
  @@index([createdAt])
  @@map("chats")
}

// 채팅 메시지
model ChatMessage {
  id              Int       @id @default(autoincrement())
  chatId          Int       @map("chat_id")
  senderId        Int       @map("sender_id")
  message         String    @db.Text
  isSystem        Boolean   @default(false) @map("is_system")
  isRead          Boolean   @default(false) @map("is_read")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  chat            Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender          User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([chatId])
  @@index([senderId])
  @@index([createdAt])
  @@map("chat_messages")
}

// 알림 모델
model Notification {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  type         String    // order_status, shipping_update, delivery_complete, product_restock, inquiry_answer, etc
  title        String    @db.VarChar(255)
  message      String    @db.Text
  isRead       Boolean   @default(false) @map("is_read")
  targetId     Int?      @map("target_id")
  targetType   String?   @map("target_type") // order, product, inquiry, etc
  actionUrl    String?   @map("action_url") @db.VarChar(255)
  createdAt    DateTime  @default(now()) @map("created_at")
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

