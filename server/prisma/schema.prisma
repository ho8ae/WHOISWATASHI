generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(100)
  slug         String     @unique @db.VarChar(100)
  description  String?
  parentId     Int?
  imageUrl     String?    @map("image_url") @db.VarChar(255)
  isActive     Boolean    @default(true) @map("is_active")
  displayOrder Int        @default(0) @map("display_order")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  products    ProductCategory[] //관계 추가
  // 자기 참조 관계
  parent       Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryToCategory")
  
  // 테이블 이름 지정
  @@map("categories")
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  slug         String   @unique @db.VarChar(255)
  description  String?
  price        Decimal  @db.Decimal(12, 2)
  salePrice    Decimal? @map("sale_price") @db.Decimal(12, 2)
  stock        Int      @default(0)
  sku          String?  @unique @db.VarChar(100)
  isActive     Boolean  @default(true) @map("is_active")
  isFeatured   Boolean  @default(false) @map("is_featured")
  metaTitle    String?  @map("meta_title") @db.VarChar(255)
  metaDescription String? @map("meta_description")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // 관계
  categories   ProductCategory[]
  images       ProductImage[]
  variants      ProductVariant[]
  
  @@map("products")
}

// 옵션 타입 (예: 색상, 사이즈)
model OptionType {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(100)
  displayOrder Int           @default(0) @map("display_order")
  
  values       OptionValue[]
  
  @@map("option_types")
}

// 옵션 값 (예: 빨강, 파랑, S, M, L)
model OptionValue {
  id            Int                   @id @default(autoincrement())
  optionTypeId  Int                   @map("option_type_id")
  value         String                @db.VarChar(100)
  displayOrder  Int                   @default(0) @map("display_order")
  
  optionType    OptionType            @relation(fields: [optionTypeId], references: [id], onDelete: Cascade)
  variants      VariantOptionValue[]
  
  @@map("option_values")
}

// 상품 변형 (특정 옵션 조합)
model ProductVariant {
  id         Int                   @id @default(autoincrement())
  productId  Int                   @map("product_id")
  sku        String?               @unique @db.VarChar(100)
  price      Decimal?              @db.Decimal(12, 2)
  salePrice  Decimal?              @map("sale_price") @db.Decimal(12, 2)
  stock      Int                   @default(0)
  isActive   Boolean               @default(true) @map("is_active")
  imageUrl   String?               @map("image_url") @db.VarChar(255)
  createdAt  DateTime              @default(now()) @map("created_at")
  updatedAt  DateTime              @updatedAt @map("updated_at")
  
  product    Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  options    VariantOptionValue[]
  // cartItems  CartItem[]
  // orderItems OrderItem[]
  
  @@map("product_variants")
}

// 변형-옵션값 관계 (어떤 변형이 어떤 옵션값을 가지는지)
model VariantOptionValue {
  variantId     Int          @map("variant_id")
  optionValueId Int          @map("option_value_id")
  
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValue   OptionValue    @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  
  @@id([variantId, optionValueId])
  @@map("variant_option_values")
}


model ProductCategory {
  productId   Int      @map("product_id")
  categoryId  Int      @map("category_id")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")
  imageUrl    String   @map("image_url") @db.VarChar(255)
  altText     String?  @map("alt_text") @db.VarChar(255)
  isPrimary   Boolean  @default(false) @map("is_primary")
  displayOrder Int      @default(0) @map("display_order")
  createdAt   DateTime @default(now()) @map("created_at")
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_resets")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  name            String
  phone           String?
  birthYear       Int?
  birthMonth      Int?
  birthDay        Int?
  isSolarCalendar Boolean?  @default(true) @map("is_solar_calendar")
  role            String    @default("customer") // customer, admin
  agreeTerms      Boolean   @default(false) @map("agree_terms")
  agreePrivacy    Boolean   @default(false) @map("agree_privacy")
  agreeSMS        Boolean   @default(false) @map("agree_sms")
  refreshToken    String?   @map("refresh_token")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // 소셜 로그인 정보 (추후 구현)
  // kakaoId        String?   @unique @map("kakao_id")
  // googleId       String?   @unique @map("google_id")
  
  // 관계
  passwordResets PasswordReset[]
  addresses       Address[]
  // orders          Order[]
  // cart            Cart?
  
  @@map("users")
}

model VerificationCode {
  id         Int       @id @default(autoincrement())
  phone      String
  code       String
  isVerified Boolean   @default(false) @map("is_verified")
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  
  @@map("verification_codes")
}

model Address {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  name        String    // 주소 별칭(예: 집, 회사)
  recipient   String    // 수령인
  postalCode  String    @map("postal_code")
  address1    String    // 기본 주소
  address2    String?   // 상세 주소
  phone       String?
  isDefault   Boolean   @default(false) @map("is_default")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}
